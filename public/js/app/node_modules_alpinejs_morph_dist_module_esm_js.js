"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_alpinejs_morph_dist_module_esm_js"],{

/***/ "./node_modules/@alpinejs/morph/dist/module.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@alpinejs/morph/dist/module.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default),\n/* harmony export */   \"morph\": () => (/* binding */ morph)\n/* harmony export */ });\n// packages/morph/src/morph.js\nvar resolveStep = () => {\n};\nvar logger = () => {\n};\nfunction breakpoint(message) {\n  if (!debug)\n    return;\n  message && logger(message.replace(\"\\n\", \"\\\\n\"));\n  return new Promise((resolve) => resolveStep = () => resolve());\n}\nasync function morph(from, toHtml, options) {\n  assignOptions(options);\n  let toEl = createElement(toHtml);\n  if (window.Alpine && !from._x_dataStack) {\n    toEl._x_dataStack = window.Alpine.closestDataStack(from);\n    toEl._x_dataStack && window.Alpine.clone(from, toEl);\n  }\n  await breakpoint();\n  patch(from, toEl);\n  return from;\n}\nmorph.step = () => resolveStep();\nmorph.log = (theLogger) => {\n  logger = theLogger;\n};\nvar key;\nvar lookahead;\nvar updating;\nvar updated;\nvar removing;\nvar removed;\nvar adding;\nvar added;\nvar debug;\nvar noop = () => {\n};\nfunction assignOptions(options = {}) {\n  let defaultGetKey = (el) => el.getAttribute(\"key\");\n  updating = options.updating || noop;\n  updated = options.updated || noop;\n  removing = options.removing || noop;\n  removed = options.removed || noop;\n  adding = options.adding || noop;\n  added = options.added || noop;\n  key = options.key || defaultGetKey;\n  lookahead = options.lookahead || true;\n  debug = options.debug || false;\n}\nfunction createElement(html) {\n  return document.createRange().createContextualFragment(html).firstElementChild;\n}\nasync function patch(from, to) {\n  if (differentElementNamesTypesOrKeys(from, to)) {\n    let result = patchElement(from, to);\n    await breakpoint(\"Swap elements\");\n    return result;\n  }\n  let updateChildrenOnly = false;\n  if (shouldSkip(updating, from, to, () => updateChildrenOnly = true))\n    return;\n  window.Alpine && initializeAlpineOnTo(from, to, () => updateChildrenOnly = true);\n  if (textOrComment(to)) {\n    await patchNodeValue(from, to);\n    updated(from, to);\n    return;\n  }\n  if (!updateChildrenOnly) {\n    await patchAttributes(from, to);\n  }\n  updated(from, to);\n  await patchChildren(from, to);\n}\nfunction differentElementNamesTypesOrKeys(from, to) {\n  return from.nodeType != to.nodeType || from.nodeName != to.nodeName || getKey(from) != getKey(to);\n}\nfunction textOrComment(el) {\n  return el.nodeType === 3 || el.nodeType === 8;\n}\nfunction patchElement(from, to) {\n  if (shouldSkip(removing, from))\n    return;\n  let toCloned = to.cloneNode(true);\n  if (shouldSkip(adding, toCloned))\n    return;\n  dom(from).replace(toCloned);\n  removed(from);\n  added(toCloned);\n}\nasync function patchNodeValue(from, to) {\n  let value = to.nodeValue;\n  if (from.nodeValue !== value) {\n    from.nodeValue = value;\n    await breakpoint(\"Change text node to: \" + value);\n  }\n}\nasync function patchAttributes(from, to) {\n  if (from._x_isShown && !to._x_isShown) {\n    return;\n  }\n  if (!from._x_isShown && to._x_isShown) {\n    return;\n  }\n  let domAttributes = Array.from(from.attributes);\n  let toAttributes = Array.from(to.attributes);\n  for (let i = domAttributes.length - 1; i >= 0; i--) {\n    let name = domAttributes[i].name;\n    if (!to.hasAttribute(name)) {\n      from.removeAttribute(name);\n      await breakpoint(\"Remove attribute\");\n    }\n  }\n  for (let i = toAttributes.length - 1; i >= 0; i--) {\n    let name = toAttributes[i].name;\n    let value = toAttributes[i].value;\n    if (from.getAttribute(name) !== value) {\n      from.setAttribute(name, value);\n      await breakpoint(`Set [${name}] attribute to: \"${value}\"`);\n    }\n  }\n}\nasync function patchChildren(from, to) {\n  let domChildren = from.childNodes;\n  let toChildren = to.childNodes;\n  let toKeyToNodeMap = keyToMap(toChildren);\n  let domKeyDomNodeMap = keyToMap(domChildren);\n  let currentTo = dom(to).nodes().first();\n  let currentFrom = dom(from).nodes().first();\n  let domKeyHoldovers = {};\n  while (currentTo) {\n    let toKey = getKey(currentTo);\n    let domKey = getKey(currentFrom);\n    if (!currentFrom) {\n      if (toKey && domKeyHoldovers[toKey]) {\n        let holdover = domKeyHoldovers[toKey];\n        dom.append(from, holdover);\n        currentFrom = holdover;\n        await breakpoint(\"Add element (from key)\");\n      } else {\n        let added2 = addNodeTo(currentTo, from);\n        await breakpoint(\"Add element: \" + added2.outerHTML || 0);\n        currentTo = dom(currentTo).nodes().next();\n        continue;\n      }\n    }\n    if (lookahead) {\n      let nextToElementSibling = dom(currentTo).next();\n      if (nextToElementSibling && currentFrom.isEqualNode(nextToElementSibling)) {\n        currentFrom = addNodeBefore(currentTo, currentFrom);\n        domKey = getKey(currentFrom);\n        await breakpoint(\"Move element (lookahead)\");\n      }\n    }\n    if (toKey !== domKey) {\n      if (!toKey && domKey) {\n        domKeyHoldovers[domKey] = currentFrom;\n        currentFrom = addNodeBefore(currentTo, currentFrom);\n        domKeyHoldovers[domKey].remove();\n        currentFrom = dom(currentFrom).nodes.next();\n        currentTo = dom(currentTo).nodes.next();\n        await breakpoint('No \"to\" key');\n        continue;\n      }\n      if (toKey && !domKey) {\n        if (domKeyDomNodeMap[toKey]) {\n          currentFrom = dom(currentFrom).replace(domKeyDomNodeMap[toKey]);\n          await breakpoint('No \"from\" key');\n        }\n      }\n      if (toKey && domKey) {\n        domKeyHoldovers[domKey] = currentFrom;\n        let domKeyNode = domKeyDomNodeMap[toKey];\n        if (domKeyNode) {\n          currentFrom = dom(currentFrom).replace(domKeyNode);\n          await breakpoint('Move \"from\" key');\n        } else {\n          domKeyHoldovers[domKey] = currentFrom;\n          currentFrom = addNodeBefore(currentTo, currentFrom);\n          domKeyHoldovers[domKey].remove();\n          currentFrom = dom(currentFrom).next();\n          currentTo = dom(currentTo).next();\n          await breakpoint(\"I dont even know what this does\");\n          continue;\n        }\n      }\n    }\n    await patch(currentFrom, currentTo);\n    currentTo = currentTo && dom(currentTo).next();\n    currentFrom = currentFrom && dom(currentFrom).next();\n  }\n  while (currentFrom) {\n    if (!shouldSkip(removing, currentFrom)) {\n      let domForRemoval = currentFrom;\n      domForRemoval.remove();\n      await breakpoint(\"remove el\");\n      removed(domForRemoval);\n    }\n    currentFrom = dom(currentFrom).nodes().next();\n  }\n}\nfunction getKey(el) {\n  return el && el.nodeType === 1 && key(el);\n}\nfunction keyToMap(els) {\n  let map = {};\n  els.forEach((el) => {\n    let theKey = getKey(el);\n    if (theKey) {\n      map[theKey] = el;\n    }\n  });\n  return map;\n}\nfunction shouldSkip(hook, ...args) {\n  let skip = false;\n  hook(...args, () => skip = true);\n  return skip;\n}\nfunction addNodeTo(node, parent) {\n  if (!shouldSkip(adding, node)) {\n    let clone = node.cloneNode(true);\n    dom(parent).append(clone);\n    added(clone);\n    return clone;\n  }\n}\nfunction addNodeBefore(node, beforeMe) {\n  if (!shouldSkip(adding, node)) {\n    let clone = node.cloneNode(true);\n    dom(beforeMe).before(clone);\n    added(clone);\n    return clone;\n  }\n  return beforeMe;\n}\nfunction initializeAlpineOnTo(from, to, childrenOnly) {\n  if (from.nodeType !== 1)\n    return;\n  if (from._x_dataStack) {\n    window.Alpine.clone(from, to);\n  }\n}\nfunction dom(el) {\n  return new DomManager(el);\n}\nvar DomManager = class {\n  el = void 0;\n  constructor(el) {\n    this.el = el;\n  }\n  traversals = {\n    first: \"firstElementChild\",\n    next: \"nextElementSibling\",\n    parent: \"parentElement\"\n  };\n  nodes() {\n    this.traversals = {\n      first: \"firstChild\",\n      next: \"nextSibling\",\n      parent: \"parentNode\"\n    };\n    return this;\n  }\n  first() {\n    return this.teleportTo(this.el[this.traversals[\"first\"]]);\n  }\n  next() {\n    return this.teleportTo(this.teleportBack(this.el[this.traversals[\"next\"]]));\n  }\n  before(insertee) {\n    this.el[this.traversals[\"parent\"]].insertBefore(insertee, this.el);\n    return insertee;\n  }\n  replace(replacement) {\n    this.el[this.traversals[\"parent\"]].replaceChild(replacement, this.el);\n    return replacement;\n  }\n  append(appendee) {\n    this.el.appendChild(appendee);\n    return appendee;\n  }\n  teleportTo(el) {\n    if (!el)\n      return el;\n    if (el._x_teleport)\n      return el._x_teleport;\n    return el;\n  }\n  teleportBack(el) {\n    if (!el)\n      return el;\n    if (el._x_teleportBack)\n      return el._x_teleportBack;\n    return el;\n  }\n};\n\n// packages/morph/src/index.js\nfunction src_default(Alpine) {\n  Alpine.morph = morph;\n}\n\n// packages/morph/builds/module.js\nvar module_default = src_default;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@alpinejs/morph/dist/module.esm.js\n");

/***/ })

}]);